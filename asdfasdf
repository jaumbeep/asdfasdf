import socket
import struct
import json

def init_raw_socket(interface):
    try:
        raw_socket = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.htons(3))
        raw_socket.bind((interface, 0))
        return raw_socket
    except socket.error as e:
        print(f"Erro ao criar o socket: {e}")
        return None

def parse_packet(packet):
    eth_length = 14
    eth_header = packet[:eth_length]
    eth_header = struct.unpack("!6s6s2s", eth_header)

    dst_mac = ':'.join(['%02x' % b for b in eth_header[0]])
    src_mac = ':'.join(['%02x' % b for b in eth_header[1]])
    proto = eth_header[2].hex()

    return dst_mac, src_mac, proto

def capture_packets(interface, output_file):
    raw_socket = init_raw_socket(interface)
    if raw_socket is None:
        return

    data_to_write = []

    try:
        while True:
            packet = raw_socket.recvfrom(65535)[0]
            dst_mac, src_mac, proto = parse_packet(packet)

            data_to_write.append({
                "Destino": dst_mac,
                "Origem": src_mac,
                "Protocolo": "0x" + proto
            })

            if len(data_to_write) >= 10:
                with open(output_file, "a") as file:
                    json.dump(data_to_write, file)
                    file.write("\n")
                data_to_write = []

    except KeyboardInterrupt:
        print("Captura de pacotes encerrada.")
    except Exception as e:
        print(f"Erro ao capturar pacotes: {e}")
    finally:
        if data_to_write:
            with open(output_file, "a") as file:
                json.dump(data_to_write, file)
                file.write("\n")
        if raw_socket:
            raw_socket.close()

capture_packets("eth0", "captured_packets.json")
